from tkinter import *
import tkinter.messagebox
from tkinter import filedialog
import xlrd
import psycopg2
from tkinter import ttk

def twoa():
        file = filedialog.askopenfilename(filetypes = (("Excel files","*.xlsx"),("all files","*.*")))
        sheet = file.sheet_by_name('Sheet1')
        for r in range(1, sheet.nrows):
            invoicedate = str(sheet.cell(r,0).value)
            invoicenumber = str(sheet.cell(r,1).value)
            stateplaceofsupply = str(sheet.cell(r,2).value)
            invoicetype = str(sheet.cell(r,3).value)
            isthisanamendment = str(sheet.cell(r,4).value)
            gststaus = str(sheet.cell(r,5).value)
            isthesupplieracompositiondealer = str(sheet.cell(r,6).value)
            returnfilingperiod = str(sheet.cell(r,7).value)
            isreversechargeapplicable = str(sheet.cell(r,8).value)
            originalinvoicedate = str(sheet.cell(r,9).value)
            originalinvoicenumber = str(sheet.cell(r,10).value)
            originalsuppliergstin = str(sheet.cell(r,11).value)
            isthisdocumentcancelled = str(sheet.cell(r,12).value)
            isthisabillofsupply= str(sheet.cell(r,13).value)
            goodsreceiptnotenumber = str(sheet.cell(r,14).value)
            goodsreceiptnotedate = str(sheet.cell(r,15).value)
            goodsreceiptquantity = str(sheet.cell(r,16).value)
            goodsreceiptamount = str(sheet.cell(r,17).value)
            goodsreceiptamount = str(sheet.cell(r,18).value)
            dateoflinkedadvancepayment = str(sheet.cell(r,19).value)
            vouchernumberoflinkedadvancepayment = str(sheet.cell(r,20).value)
            adjustmentamount = str(sheet.cell(r,21).value)
            mygstinname = str(sheet.cell(r,22).value)
            mygstin = str(sheet.cell(r,23).value)
            typeofimport = str(sheet.cell(r,24).value)
            billofentryportcode = str(sheet.cell(r,25).value)
            billofentrynumber = str(sheet.cell(r,26).value)
            billofentrydate = str(sheet.cell(r,27).value)
            suppliername = str(sheet.cell(r,28).value)
            suppliergstin = str(sheet.cell(r,29).value)
            supplieraddress = str(sheet.cell(r,30).value)
            suppliercity = str(sheet.cell(r,31).value)
            supplierstate = str(sheet.cell(r,32).value)
            itemquantity = str(sheet.cell(r,33).value)
            itemunitofmeasurement = str(sheet.cell(r,34).value)
            itemrate = str(sheet.cell(r,35).value)
            goodsorservices = str(sheet.cell(r,36).value)
            itemdesc = str(sheet.cell(r,37).value)
            hsnorsac = str(sheet.cell(r,38).value)
            cgstrate = str(sheet.cell(r,39).value)
            cgstamt = str(sheet.cell(r,40).value)
            sgstrate = str(sheet.cell(r,41).value)
            sgstamt = str(sheet.cell(r,42).value)
            igstrate = str(sheet.cell(r,43).value)
            igstamt = str(sheet.cell(r,44).value)
            cessrate = str(sheet.cell(r,45).value)
            cessamt = str(sheet.cell(r,46).value)
            itemtaxablevalue = str(sheet.cell(r,47).value)
            totalitemdiscountamt = str(sheet.cell(r,48).value)
            exemptornongst = str(sheet.cell(r,49).value)
            totaltransactionvalue = str(sheet.cell(r,50).value)
            conn = psycopg2.connect(user = "postgres",password = "rocker12", host = "127.0.0.1", port = "5433", database = "nova")
            cursor = conn.cursor()
            query = """INSERT INTO "TWOA"("Invoice Date","Invoice Number","State Place of Supply","Invoice Type","Is this an Amendment?","GST Status","Is the supplier a Composition dealer?","Return Filing Period	Is Reverse Charge Applicable?","Original Invoice Date (In case of amendment)","Original Invoice Number (In case of amendment)","Original Supplier GSTIN (In case of amendment)","Is this document cancelled?","Is this a Bill of Supply","Goods Receipt Note Number","Goods Receipt Note Date","Goods Receipt Quantity","Goods Receipt Amount","Date of Linked Advance Payment","Voucher Number of Linked Advance Payment","Adjustment Amount of Linked Advance Payment","My GSTIN Name","My GSTIN","Type of Import (Goods, Services, SEZ)","Bill of Entry Port Code","Bill of Entry Number","Bill of Entry Date","Supplier Name","Supplier GSTIN","Supplier Address","Supplier City","Supplier State","Item Quantity","Item Unit of Measurement","Item Rate","Is the item a GOOD (G) or SERVICE (S)","Item Description","HSN or SAC Code","CGST Rate","CGST Amount","SGST Rate","SGST Amount","IGST Rate","IGST Amount","CESS Rate","CESS Amount","Item Taxable Value","Total Item Discount Amount","Is this a Nil Rated/Exempt/NonGST item?","Total Transaction Value") VALUES (   %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s ,   %s,    %s,    %s,    %s ,   %s,    %s,    %s,    %s, %s,    %s ,   %s,    %s,    %s,    %s, %s,    %s ,   %s,    %s,    %s,    %s, %s,    %s ,   %s,    %s,    %s,    %s, %s)"""
            values = (invoicedate, invoicenumber, stateplaceofsupply, invoicetype, isthisanamendment, gststaus, isthesupplieracompositiondealer, returnfilingperiod, isreversechargeapplicable, originalinvoicedate, originalinvoicenumber, originalsuppliergstin, isthisdocumentcancelled, isthisabillofsupply, goodsreceiptnotenumber, goodsreceiptnotedate, goodsreceiptquantity, goodsreceiptamount, dateoflinkedadvancepayment, vouchernumberoflinkedadvancepayment, adjustmentamount, mygstinname, mygstin, typeofimport, billofentryportcode, billofentrynumber, billofentrydate, suppliername, suppliergstin, supplieraddress, suppliercity, supplierstate, itemquantity, itemunitofmeasurement, itemrate, goodsorservices, itemdesc, hsnorsac, cgstrate, cgstamt, sgstrate, sgstamt, igstrate, igstamt, cessrate, cessamt, itemtaxablevalue, totalitemdiscountamt, exemptornongst, totaltransactionvalue)
            cursor.execute(query, values)
            cursor.close()
            conn.commit()
            conn.close()

def inward():
    try:
    #filename = filedialog.askopenfile()
    #wb = xlrd.open_workbook(str(filename))
        wb = xlrd.open_workbook('Inward Register 2017-19\Inward Register 2017-19.xlsx')
        sheet = wb.sheet_by_name('Sheet1')
    #print(str(wb) + "" + str(sheet))
        for r in range(1, sheet.nrows):
                sourceidentifier = str(sheet.cell(r,0).value)
                sourcefilename = str(sheet.cell(r,1).value)
                glaccountcode = str(sheet.cell(r,2).value)
                profitcenter1 = str(sheet.cell(r,3).value)
                profitcenter2 = str(sheet.cell(r,4).value)
                palntcode = str(sheet.cell(r,5).value)
                returnperiod = str(sheet.cell(r,6).value)
                recipientgstin = str(sheet.cell(r,7).value)
                documenttype = str(sheet.cell(r,8).value)
                supplytype = str(sheet.cell(r,9).value)
                documentnumber = str(sheet.cell(r,10).value)
                documentdate = str(sheet.cell(r,11).value)
                originaldocumentnumber = str(sheet.cell(r,12).value)
                originaldocumentdate = str(sheet.cell(r,13).value)
                crdrpregst = str(sheet.cell(r,14).value)
                linenumber = str(sheet.cell(r,15).value)
                suppliergstin = str(sheet.cell(r,16).value)
                originalsuppliergstin = str(sheet.cell(r,17).value)
                suppliername = str(sheet.cell(r,18).value)
                suppliercode = str(sheet.cell(r,19).value)
                pos = str(sheet.cell(r,20).value)
                hsnorsac = str(sheet.cell(r,21).value)
                itemcode = str(sheet.cell(r,22).value)
                itemdescription = str(sheet.cell(r,23).value)
                categoryofitem = str(sheet.cell(r,24).value)
                unitofmeasurement = str(sheet.cell(r,25).value)
                quantity = str(sheet.cell(r,26).value)
                cessratespecific = str(sheet.cell(r,27).value)
                cessamountspecific = str(sheet.cell(r,28).value)
                invoicevalue = str(sheet.cell(r,29).value)
                reversechargeflag = str(sheet.cell(r,30).value)
                eligibilityindicator = str(sheet.cell(r,31).value)
                commonsupplyindicator = str(sheet.cell(r,32).value)
                purchasevouchernumber = str(sheet.cell(r,33).value)
                purchasevoucherdate = str(sheet.cell(r,34).value)
                paymentvouchernumber = str(sheet.cell(r,35).value)
                paymentdate = str(sheet.cell(r,36).value)
                contractnumber = str(sheet.cell(r,37).value)
                contractdate = str(sheet.cell(r,38).value)
                contractvalue = str(sheet.cell(r,39).value)
                userdefinedfiled1 = str(sheet.cell(r,40).value)
                userdefinedfield2 = str(sheet.cell(r,41).value)
                userdefinedfield3 = str(sheet.cell(r,42).value)

        try:
            conn = psycopg2.connect(user = "postgres",password = "rocker12", host = "127.0.0.1", port = "5433", database = "nova")
            cursor = conn.cursor()
            query = """INSERT INTO "INWARD"("SOURCEIDENTIFIER","SOURCEFILENAME","GLACCOUNTCODE","PROFITCENTRE1","PROFITCENTRE2","PLANTCODE","RETURNPERIOD","RECIPIENTGSTIN","DOCUMENTTYPE","SUPPLYTYPE","DOCUMENTNUMBER","DOCUMENTDATE","ORIGINALDOCUMENTNUMBER","ORIGINALDOCUMENTDATE","CRDRPREGST","LINENUMBER","SUPPLIERGSTIN","ORIGINALSUPPLIERGSTIN","SUPPLIERNAME","SUPPLIERCODE","POS","HSNORSAC","ITEMCODE","ITEMDESCRIPTION","CATEGORYOFITEM","UNITOFMEASUREMENT","QUANTITY","CESSRATESPECIFIC","CESSAMOUNTSPECIFIC","INVOICEVALUE","REVERSECHARGEFLAG","ELIGIBILITYINDICATOR","COMMONSUPPLYINDICATOR","PURCHASEVOUCHERNUMBER","PURCHASEVOUCHERDATE","PAYMENTVOUCHERNUMBER","PAYMENTDATE","CONTRACTNUMBER","CONTRACTDATE","CONTRACTVALUE","USERDEFINEDFIELD1","USERDEFINEDFIELD2","USERDEFINEDFIELD3") VALUES (%s, %s,%s,%s,%s,%s,%s, %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s,    %s)"""
            values = (sourceidentifier, sourcefilename, glaccountcode, profitcenter1, profitcenter2, palntcode, returnperiod, recipientgstin, documenttype, supplytype, documentnumber, documentdate, originaldocumentnumber, originaldocumentdate, crdrpregst, linenumber, suppliergstin, originalsuppliergstin, suppliername, suppliercode, pos, hsnorsac, itemcode, itemdescription, categoryofitem, unitofmeasurement, quantity, cessratespecific, cessamountspecific, invoicevalue, reversechargeflag, eligibilityindicator, commonsupplyindicator, purchasevouchernumber, purchasevoucherdate, paymentvouchernumber, paymentdate, contractnumber, contractdate, contractvalue, userdefinedfiled1, userdefinedfield2, userdefinedfield3)
            cursor.execute(query, values)
            cursor.close()
        except(Exception) as e:
            print(e)
        conn.commit()
        conn.close()
    except (Exception) as error:
        print(error)


def res():
    root.geometry("500x500")

def quit():
    answer = tkinter.messagebox.askforcancel("Are you sure?", "Are you sure you want to exit?")
    if(answer):
        quit()

root = Tk()
topframe = Frame(root)
topframe.pack()
bottomframe = Frame(root)
bottomframe.pack(side=BOTTOM)
#root.minsize(width=800, height=600)
#root.maxsize(width=1200, height=700)
root.geometry("1200x600")
label = Label(root, text="Database 1:", bg="blue")
label.pack(side=LEFT, fill=X)
label = Label(root, text="Database 1:", bg="red")
label.pack(side=BOTTOM, fill=Y, padx=34, pady=34)
btn1 = Button(topframe, text="Database 1", bg="cyan", command=twoa)
btn1.pack(side=LEFT)
btn2 = Button(topframe, text="Database 2", bg="#00ff00", command=inward)
btn2.pack(side=LEFT)
btn3 = Button(topframe, text="Start", bg="#00ff00")
btn3.pack(side=LEFT)
btn4 = Button(topframe, text="Delete", bg="#ff0000")
menu1 = Menu(root)
root.config(menu=menu1)
submenu1 = Menu(menu1)
menu1.add_cascade(label="File", menu=submenu1)
submenu1.add_cascade(label="New")
menu2 = Menu(menu1)
menu1.add_cascade(label="Edit")
menu2 = Menu(menu1)
submenu2 = Menu(menu2)
submenu2.add_cascade(label="Window Resize", command=res)
btn4.pack(side=LEFT)
status = Label(root, text="Running",relief=SUNKEN, anchor="w", bd=1)
status.pack(side=BOTTOM, fill=X)
tab_control = ttk.Notebook(root)
tab1 = ttk.Frame(tab_control)
tab_control.add(tab1, text='Main')
tab_control.pack(expand=1, fill='both')
root.mainloop()